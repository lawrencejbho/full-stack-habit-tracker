[{"/home/lawrence/Projects/habit-tracker/frontend/src/index.js":"1","/home/lawrence/Projects/habit-tracker/frontend/src/App.js":"2","/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit.js":"3","/home/lawrence/Projects/habit-tracker/frontend/src/components/TodayDate.js":"4","/home/lawrence/Projects/habit-tracker/frontend/src/components/ContributionGraph.js":"5","/home/lawrence/Projects/habit-tracker/frontend/src/components/Plus.js":"6","/home/lawrence/Projects/habit-tracker/frontend/src/components/Minus.js":"7","/home/lawrence/Projects/habit-tracker/frontend/src/components/Box.js":"8","/home/lawrence/Projects/habit-tracker/frontend/src/pages/HabitTracker.js":"9","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Navbar.js":"10","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Home.js":"11","/home/lawrence/Projects/habit-tracker/frontend/src/pages/NotFound.js":"12","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Pomodoro.js":"13","/home/lawrence/Projects/habit-tracker/frontend/src/components/Weather.js":"14","/home/lawrence/Projects/habit-tracker/frontend/src/pages/PomodoroTimer.js":"15","/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit-Add.js":"16","/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit-Delete.js":"17","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Analytics.js":"18","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Counters.js":"19"},{"size":211,"mtime":1663994391470,"results":"20","hashOfConfig":"21"},{"size":1319,"mtime":1666126595440,"results":"22","hashOfConfig":"21"},{"size":1398,"mtime":1666234716580,"results":"23","hashOfConfig":"21"},{"size":748,"mtime":1664413752240,"results":"24","hashOfConfig":"21"},{"size":6218,"mtime":1666823858030,"results":"25","hashOfConfig":"21"},{"size":318,"mtime":1664413752240,"results":"26","hashOfConfig":"21"},{"size":327,"mtime":1664413752240,"results":"27","hashOfConfig":"21"},{"size":1329,"mtime":1666745193310,"results":"28","hashOfConfig":"21"},{"size":9878,"mtime":1666823870330,"results":"29","hashOfConfig":"21"},{"size":1072,"mtime":1666233978020,"results":"30","hashOfConfig":"21"},{"size":485,"mtime":1664912714160,"results":"31","hashOfConfig":"21"},{"size":341,"mtime":1664413752240,"results":"32","hashOfConfig":"21"},{"size":9028,"mtime":1666145702570,"results":"33","hashOfConfig":"21"},{"size":2028,"mtime":1665170893420,"results":"34","hashOfConfig":"21"},{"size":1225,"mtime":1664993676630,"results":"35","hashOfConfig":"21"},{"size":1525,"mtime":1666405788150,"results":"36","hashOfConfig":"21"},{"size":354,"mtime":1665597616560,"results":"37","hashOfConfig":"21"},{"size":6174,"mtime":1666821529390,"results":"38","hashOfConfig":"21"},{"size":269,"mtime":1666126456330,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1w3m9ng",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/home/lawrence/Projects/habit-tracker/frontend/src/index.js",[],[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/App.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/TodayDate.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/ContributionGraph.js",["100","101"],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Plus.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Minus.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Box.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/HabitTracker.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Navbar.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Home.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/NotFound.js",["102"],[],"import React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction NotFound() {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      navigate(\"/\");\r\n    }, 2000);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>Not Found</h1>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Pomodoro.js",["103","104"],[],"import React, { useEffect, useState } from \"react\";\r\nimport PomodoroTimer from \"./PomodoroTimer.js\";\r\nimport \"./pomodoro.css\";\r\nimport ContributionGraph from \"../components/ContributionGraph\";\r\nimport mango from \"../images/mango.png\";\r\n\r\nfunction Pomodoro() {\r\n  const [secondsPomodoro, setSecondsPomodoro] = useState(2);\r\n  const [secondsBreak, setSecondsBreak] = useState(2);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isBreakActive, setIsBreakActive] = useState(false);\r\n  const pomodoroTimeDisplay = timeConversion(secondsPomodoro);\r\n  const breakTimeDisplay = timeConversion(secondsBreak);\r\n\r\n  // for submitting pomodoros\r\n  const [pomodoroFormData, setPomodoroFormData] = useState({});\r\n  // for pulling pomodoros from the db\r\n  const [pomodoroDatabase, setPomodoroDatabase] = useState([]);\r\n\r\n  // not sure if this is the proper way to do this but I leave seconds as the state variable and use a normal variable that uses seconds with derived state\r\n  function timeConversion(seconds) {\r\n    let time = {};\r\n    if (seconds > 0) {\r\n      time = {\r\n        minutes:\r\n          Math.floor(seconds / 60) > 10\r\n            ? Math.floor(seconds / 60)\r\n            : `0${Math.floor(seconds / 60)}`,\r\n        seconds: seconds % 60 >= 10 ? seconds % 60 : `0${seconds % 60}`,\r\n      };\r\n    } else if (seconds === 0) {\r\n      time = {\r\n        minutes: \"00\",\r\n        seconds: \"00\",\r\n      };\r\n    }\r\n    return time;\r\n  }\r\n\r\n  // first useEffect for the Pomodoro timer\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    // local notification\r\n    function notificationPermissionPomodoro() {\r\n      Notification.requestPermission().then((perm) => {\r\n        if (perm === \"granted\") {\r\n          const notification = new Notification(\"Pomodoro Finished\", {\r\n            body: \"Start Break?\",\r\n            data: { test: \"Data\" },\r\n            icon: mango,\r\n          });\r\n          // click the notification to immediately start break\r\n          notification.addEventListener(\"click\", (e) => {\r\n            // console.log(e);\r\n            resetBreak();\r\n            toggleBreak();\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    // add to the pomodoros array in the database when a pomodoro is complete\r\n    async function updatePomodorosArray(event) {\r\n      let data = { username: \"test-user\", pomodoro: currentTime() };\r\n      console.log(data);\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      };\r\n\r\n      fetch(\"/api/pomodoro-add-pomodoros\", requestOptions).then((response) => {\r\n        console.log(response);\r\n        return response.json();\r\n      });\r\n    }\r\n\r\n    if (isActive && secondsPomodoro !== 0) {\r\n      interval = setInterval(() => {\r\n        setSecondsPomodoro((seconds) => seconds - 1);\r\n      }, 1000);\r\n    } else if (!isActive && secondsPomodoro !== 0) {\r\n      clearInterval(interval);\r\n    } else if (isActive && secondsPomodoro === 0) {\r\n      // need to check isActive here or you'll get two notifications\r\n      setIsActive(false);\r\n      notificationPermissionPomodoro();\r\n      updatePomodorosArray();\r\n    }\r\n    return () => clearInterval(interval); // return clearInterval for clean up\r\n  }, [isActive, secondsPomodoro]); // need isActive here in the dependency array to start the useEffect or secondsPomodoro will never go down\r\n\r\n  // second useEffect for the Break timer, almost exactly the same\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    // local notifications for Break finished\r\n    function notificationPermissionBreak() {\r\n      Notification.requestPermission().then((perm) => {\r\n        if (perm === \"granted\") {\r\n          const notification = new Notification(\"Break Finished\", {\r\n            body: \"Start Focusing?\",\r\n            data: { test: \"Data\" },\r\n            icon: mango,\r\n          });\r\n          // click the notification to immediately start break\r\n          notification.addEventListener(\"click\", (e) => {\r\n            // console.log(e);\r\n            resetPomodoro();\r\n            resetBreak();\r\n            togglePomodoro();\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    if (isBreakActive && secondsBreak !== 0) {\r\n      interval = setInterval(() => {\r\n        setSecondsBreak((seconds) => seconds - 1);\r\n      }, 1000);\r\n    } else if (!isBreakActive && secondsBreak !== 0) {\r\n      clearInterval(interval);\r\n    } else if (isBreakActive && secondsBreak === 0) {\r\n      setIsBreakActive(false);\r\n      notificationPermissionBreak();\r\n    }\r\n    return () => clearInterval(interval); // return clearInterval for clean up\r\n  }, [isBreakActive, secondsBreak]);\r\n\r\n  function togglePomodoro() {\r\n    setIsActive((prev) => !prev);\r\n  }\r\n\r\n  function toggleBreak() {\r\n    setIsBreakActive((prev) => !prev);\r\n  }\r\n\r\n  function resetPomodoro() {\r\n    setSecondsPomodoro(1500);\r\n    if (!isBreakActive) setSecondsBreak(300);\r\n    setIsActive(false);\r\n    // isPomodoro = false;\r\n  }\r\n\r\n  function resetBreak() {\r\n    setSecondsBreak(300);\r\n    setIsBreakActive(false);\r\n  }\r\n\r\n  // this seems to work for which one to display, I also tried checking for isActive but it didn't work as intended\r\n  function startOrResumePomodoro() {\r\n    if (secondsPomodoro === 1500) {\r\n      return \"Start\";\r\n    } else if (secondsPomodoro === 0) {\r\n      return \"Reset\";\r\n    } else {\r\n      return \"Resume\";\r\n    }\r\n  }\r\n  function startOrResumeBreak() {\r\n    if (secondsBreak === 300) {\r\n      return \"Start\";\r\n    } else if (secondsBreak === 0) {\r\n      return \"Reset\";\r\n    } else {\r\n      return \"Resume\";\r\n    }\r\n  }\r\n\r\n  // get the current time in seconds\r\n  const currentTime = () => {\r\n    const currentTime = new Date().getTime();\r\n    return Math.floor(currentTime / 1000);\r\n  };\r\n\r\n  // add to the pomodoros array on the database\r\n  async function handleSubmit(event) {\r\n    console.log(pomodoroFormData);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(pomodoroFormData),\r\n    };\r\n\r\n    fetch(\"/api/pomodoro-add-pomodoros\", requestOptions).then((response) => {\r\n      console.log(response);\r\n      return response.json();\r\n    });\r\n  }\r\n\r\n  function handleChangeUsername(event) {\r\n    setPomodoroFormData({ ...pomodoroFormData, username: event.target.value });\r\n  }\r\n\r\n  function handleChangePomodoro(event) {\r\n    setPomodoroFormData({ ...pomodoroFormData, pomodoro: event.target.value });\r\n  }\r\n\r\n  // get pomodoros from database and save to state to be passed down\r\n  // probably better to do it here versus within the contribution graph component\r\n  useEffect(() => {\r\n    const getPomodoros = async () => {\r\n      const data = await fetch(\"/api/pomodoro-get\");\r\n      const posts_data = await data.json();\r\n      setPomodoroDatabase(posts_data[0].timestamps);\r\n      // console.log(posts_data[0].timestamps);\r\n    };\r\n    getPomodoros();\r\n  }, []);\r\n\r\n  // update the calendar Schema in case it's older than today's date\r\n  // when I put this in ContributionGraph it was double counting pomodoros\r\n\r\n  useEffect(() => {\r\n    const updateCalendar = async () => {\r\n      const data = await fetch(\"/api/calendar-update\");\r\n      const get_data = await data.json();\r\n      // console.log(get_data);\r\n    };\r\n    updateCalendar();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"white-text\">Pomodoro</h1>\r\n      <hr className=\"app-line\"></hr>\r\n      <div>\r\n        <form className=\"white-text\" onSubmit={handleSubmit}>\r\n          <label>\r\n            username\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              onChange={handleChangeUsername}\r\n              value={pomodoroFormData.username || \"\"}\r\n            />\r\n          </label>\r\n          <label>\r\n            pomodoro\r\n            <input\r\n              type=\"text\"\r\n              name=\"pomodoro\"\r\n              onChange={handleChangePomodoro}\r\n              value={pomodoroFormData.timestamps || \"\"}\r\n            />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n      <div className=\"timer-container\">\r\n        <PomodoroTimer\r\n          minutes={pomodoroTimeDisplay.minutes}\r\n          seconds={pomodoroTimeDisplay.seconds}\r\n          activePomodoro={isActive}\r\n          activeBreak={isBreakActive}\r\n          active={isActive}\r\n          toggle={togglePomodoro}\r\n          reset={resetPomodoro}\r\n          startOrResume={startOrResumePomodoro}\r\n          type=\"pomodoro\"\r\n        />\r\n        <PomodoroTimer\r\n          minutes={breakTimeDisplay.minutes}\r\n          seconds={breakTimeDisplay.seconds}\r\n          activePomodoro={isActive}\r\n          activeBreak={isBreakActive}\r\n          active={isBreakActive}\r\n          toggle={toggleBreak}\r\n          reset={resetBreak}\r\n          startOrResume={startOrResumeBreak}\r\n          type=\"break\"\r\n        />\r\n      </div>\r\n      <ContributionGraph timestamps={pomodoroDatabase} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pomodoro;\r\n","/home/lawrence/Projects/habit-tracker/frontend/src/components/Weather.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/PomodoroTimer.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit-Add.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit-Delete.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Analytics.js",["105"],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Counters.js",[],[],{"ruleId":"106","severity":1,"message":"107","line":6,"column":10,"nodeType":"108","messageId":"109","endLine":6,"endColumn":22},{"ruleId":"110","severity":1,"message":"111","line":114,"column":42,"nodeType":"112","messageId":"113","endLine":114,"endColumn":44},{"ruleId":"114","severity":1,"message":"115","line":11,"column":6,"nodeType":"116","endLine":11,"endColumn":8,"suggestions":"117"},{"ruleId":"114","severity":1,"message":"118","line":129,"column":6,"nodeType":"116","endLine":129,"endColumn":35,"suggestions":"119"},{"ruleId":"106","severity":1,"message":"120","line":218,"column":13,"nodeType":"108","messageId":"109","endLine":218,"endColumn":21},{"ruleId":"110","severity":1,"message":"111","line":181,"column":29,"nodeType":"112","messageId":"113","endLine":181,"endColumn":31},"no-unused-vars","'isPropsReady' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has a missing dependency: 'resetPomodoro'. Either include it or remove the dependency array.",["122"],"'get_data' is assigned a value but never used.",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [navigate]",{"range":"127","text":"128"},"Update the dependencies array to be: [isBreakActive, resetPomodoro, secondsBreak]",{"range":"129","text":"130"},[241,243],"[navigate]",[4634,4663],"[isBreakActive, resetPomodoro, secondsBreak]"]