[{"/home/lawrence/Projects/habit-tracker/frontend/src/index.js":"1","/home/lawrence/Projects/habit-tracker/frontend/src/App.js":"2","/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit.js":"3","/home/lawrence/Projects/habit-tracker/frontend/src/components/TodayDate.js":"4","/home/lawrence/Projects/habit-tracker/frontend/src/components/ContributionGraph.js":"5","/home/lawrence/Projects/habit-tracker/frontend/src/components/Plus.js":"6","/home/lawrence/Projects/habit-tracker/frontend/src/components/Minus.js":"7","/home/lawrence/Projects/habit-tracker/frontend/src/components/Box.js":"8","/home/lawrence/Projects/habit-tracker/frontend/src/pages/HabitTracker.js":"9","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Navbar.js":"10","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Home.js":"11","/home/lawrence/Projects/habit-tracker/frontend/src/pages/NotFound.js":"12","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Pomodoro.js":"13","/home/lawrence/Projects/habit-tracker/frontend/src/components/Weather.js":"14","/home/lawrence/Projects/habit-tracker/frontend/src/pages/PomodoroTimer.js":"15","/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit-Add.js":"16","/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit-Delete.js":"17","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Analytics.js":"18","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Counters.js":"19"},{"size":211,"mtime":1663994391470,"results":"20","hashOfConfig":"21"},{"size":1319,"mtime":1666126595440,"results":"22","hashOfConfig":"21"},{"size":1398,"mtime":1666234716580,"results":"23","hashOfConfig":"21"},{"size":748,"mtime":1664413752240,"results":"24","hashOfConfig":"21"},{"size":6218,"mtime":1666824218620,"results":"25","hashOfConfig":"21"},{"size":318,"mtime":1664413752240,"results":"26","hashOfConfig":"21"},{"size":327,"mtime":1664413752240,"results":"27","hashOfConfig":"21"},{"size":1329,"mtime":1666824218620,"results":"28","hashOfConfig":"21"},{"size":9878,"mtime":1666824218620,"results":"29","hashOfConfig":"21"},{"size":1072,"mtime":1666233978020,"results":"30","hashOfConfig":"21"},{"size":485,"mtime":1664912714160,"results":"31","hashOfConfig":"21"},{"size":341,"mtime":1664413752240,"results":"32","hashOfConfig":"21"},{"size":9028,"mtime":1666145702570,"results":"33","hashOfConfig":"21"},{"size":2028,"mtime":1665170893420,"results":"34","hashOfConfig":"21"},{"size":1225,"mtime":1664993676630,"results":"35","hashOfConfig":"21"},{"size":1525,"mtime":1666405788150,"results":"36","hashOfConfig":"21"},{"size":354,"mtime":1665597616560,"results":"37","hashOfConfig":"21"},{"size":6174,"mtime":1666824218620,"results":"38","hashOfConfig":"21"},{"size":269,"mtime":1666126456330,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1w3m9ng",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"43"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/home/lawrence/Projects/habit-tracker/frontend/src/index.js",[],[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/App.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/TodayDate.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/ContributionGraph.js",["102","103"],[],"import React, { useEffect, useState, useMemo } from \"react\";\r\nimport Box from \"./Box.js\";\r\n\r\nfunction ContributionGraph(props) {\r\n  const [habitData, setHabitData] = useState([]);\r\n  const [isPropsReady, setIsPropsReady] = useState(false);\r\n  const [timeOffset, setTimeOffset] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  let currentMonth = \"\";\r\n  let count = 0;\r\n\r\n  const month = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  // pull the calendar from database\r\n  useEffect(() => {\r\n    fetch(\"/api/calendar-get\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(res);\r\n        setHabitData(res);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // go through each habit in the array and convert it into the date, find the index that corresponds to that date and then increment it's count\r\n    function determineDateByHabit() {\r\n      // use this to zero out all of our counters or else it'll start double counting every time we click on a box\r\n      habitData.forEach((value) => (value.count = 0));\r\n\r\n      props.timestamps.forEach((value) => {\r\n        const date = new Date(value * 1000).toLocaleDateString(\"en-us\", {\r\n          year: \"numeric\",\r\n          month: \"long\",\r\n          day: \"numeric\",\r\n        });\r\n        // console.log(date);\r\n\r\n        // need this because of the async, or it'll sometimes break the app if habitData isn't ready\r\n        if (habitData.length > 1) {\r\n          const searchObjectIndex = habitData.findIndex(\r\n            (day) => day.date === date\r\n          );\r\n          // console.log(habitData[searchObjectIndex]);\r\n          habitData[searchObjectIndex].count++;\r\n        }\r\n      });\r\n    }\r\n\r\n    // use this because sometimes the async is slow so wait until this gets properly updated\r\n    if (props.timestamps !== undefined) {\r\n      if (props.timestamps.length !== 0) {\r\n        determineDateByHabit();\r\n        setIsPropsReady((prevValue) => !prevValue); // need to use state here so that we can force a rerender or else the graph won't show anything initially\r\n      }\r\n    }\r\n  }, [props.timestamps, habitData]);\r\n\r\n  // convert our dates in string format back into unix time\r\n  const convertDateToUnixTime = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.getTime() / 1000;\r\n  };\r\n\r\n  // grab the current time, with useMemo it should only calculate this on the first page load\r\n  useMemo(() => {\r\n    setCurrentTime(Math.floor(new Date().getTime() / 1000));\r\n  }, []);\r\n\r\n  // I'm not sure if these calculations here are expensive because they are run per each entry in the database, also they get run every rerender.\r\n  // not sure if this is what useMemo is for but will leave like this for now\r\n  // this will grab the current day and then create a time offset for our calculation later that will make it so that the graph always starts on Sunday\r\n  useMemo(() => {\r\n    const currentDayInteger = new Date().getDay();\r\n    for (let i = 0; i < currentDayInteger; i++) {\r\n      setTimeOffset((offset) => (offset += 86400));\r\n    }\r\n  }, []);\r\n\r\n  const convertDateToMonth = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.getMonth();\r\n  };\r\n\r\n  /*\r\n  couldn't find a good way to make the months display all in the same map of the habitData so I just divided it out by two \r\n  also had some problems with getting it to render the month, then 7 boxes so I just created them as two separate components\r\n  from there it's mostly just using css and html to get the proper lineup.  It looks pretty good but the spacing is not uniform to the boxes unfortunately\r\n  */\r\n  return (\r\n    <div className=\"contribution-graph-box-container\">\r\n      <div className=\"contribution-graph-days\">\r\n        <div>Mon</div>\r\n        <div>Wed</div>\r\n        <div>Fri</div>\r\n      </div>\r\n\r\n      <div className=\"contribution-graph-parent\">\r\n        <div className=\"contribution-graph-months\">\r\n          {habitData.length > 1 &&\r\n            habitData.map((entry, index) => {\r\n              const date = convertDateToUnixTime(entry.date);\r\n              if (\r\n                currentTime - date > 31536000 + timeOffset ||\r\n                date > currentTime\r\n              ) {\r\n                return false;\r\n              }\r\n              let newMonth = convertDateToMonth(entry.date);\r\n              count++;\r\n              if (count % 7 === 1) {\r\n                if (currentMonth !== newMonth) {\r\n                  currentMonth = newMonth;\r\n                  return <div>{month[newMonth].slice(0, 3)}</div>;\r\n                } else {\r\n                  return <div>&emsp;</div>;\r\n                }\r\n              }\r\n            })}\r\n        </div>\r\n\r\n        <div className=\"box2-container\">\r\n          {habitData.length > 1 &&\r\n            habitData.map((entry, index) => {\r\n              const date = convertDateToUnixTime(entry.date);\r\n              if (\r\n                currentTime - date > 31536000 + timeOffset ||\r\n                date > currentTime\r\n              ) {\r\n                return false;\r\n              }\r\n              return (\r\n                <div>\r\n                  <Box\r\n                    key={index}\r\n                    date={entry.date}\r\n                    contributions={entry.count}\r\n                    add_timestamps={props.add_timestamps}\r\n                    handleClick={() => props.add_timestamps(entry.date)}\r\n                    randomColor={props.randomColor}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n\r\n        <div className=\"contribution-graph-legend\">\r\n          Less\r\n          <Box contributions={0} randomColor={props.randomColor} />\r\n          <Box contributions={1} randomColor={props.randomColor} />\r\n          <Box contributions={3} randomColor={props.randomColor} />\r\n          <Box contributions={5} randomColor={props.randomColor} />\r\n          <Box contributions={7} randomColor={props.randomColor} />\r\n          More\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContributionGraph;\r\n","/home/lawrence/Projects/habit-tracker/frontend/src/components/Plus.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Minus.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Box.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/HabitTracker.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Navbar.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Home.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/NotFound.js",["104"],[],"import React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction NotFound() {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      navigate(\"/\");\r\n    }, 2000);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>Not Found</h1>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Pomodoro.js",["105","106"],[],"import React, { useEffect, useState } from \"react\";\r\nimport PomodoroTimer from \"./PomodoroTimer.js\";\r\nimport \"./pomodoro.css\";\r\nimport ContributionGraph from \"../components/ContributionGraph\";\r\nimport mango from \"../images/mango.png\";\r\n\r\nfunction Pomodoro() {\r\n  const [secondsPomodoro, setSecondsPomodoro] = useState(2);\r\n  const [secondsBreak, setSecondsBreak] = useState(2);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isBreakActive, setIsBreakActive] = useState(false);\r\n  const pomodoroTimeDisplay = timeConversion(secondsPomodoro);\r\n  const breakTimeDisplay = timeConversion(secondsBreak);\r\n\r\n  // for submitting pomodoros\r\n  const [pomodoroFormData, setPomodoroFormData] = useState({});\r\n  // for pulling pomodoros from the db\r\n  const [pomodoroDatabase, setPomodoroDatabase] = useState([]);\r\n\r\n  // not sure if this is the proper way to do this but I leave seconds as the state variable and use a normal variable that uses seconds with derived state\r\n  function timeConversion(seconds) {\r\n    let time = {};\r\n    if (seconds > 0) {\r\n      time = {\r\n        minutes:\r\n          Math.floor(seconds / 60) > 10\r\n            ? Math.floor(seconds / 60)\r\n            : `0${Math.floor(seconds / 60)}`,\r\n        seconds: seconds % 60 >= 10 ? seconds % 60 : `0${seconds % 60}`,\r\n      };\r\n    } else if (seconds === 0) {\r\n      time = {\r\n        minutes: \"00\",\r\n        seconds: \"00\",\r\n      };\r\n    }\r\n    return time;\r\n  }\r\n\r\n  // first useEffect for the Pomodoro timer\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    // local notification\r\n    function notificationPermissionPomodoro() {\r\n      Notification.requestPermission().then((perm) => {\r\n        if (perm === \"granted\") {\r\n          const notification = new Notification(\"Pomodoro Finished\", {\r\n            body: \"Start Break?\",\r\n            data: { test: \"Data\" },\r\n            icon: mango,\r\n          });\r\n          // click the notification to immediately start break\r\n          notification.addEventListener(\"click\", (e) => {\r\n            // console.log(e);\r\n            resetBreak();\r\n            toggleBreak();\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    // add to the pomodoros array in the database when a pomodoro is complete\r\n    async function updatePomodorosArray(event) {\r\n      let data = { username: \"test-user\", pomodoro: currentTime() };\r\n      console.log(data);\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      };\r\n\r\n      fetch(\"/api/pomodoro-add-pomodoros\", requestOptions).then((response) => {\r\n        console.log(response);\r\n        return response.json();\r\n      });\r\n    }\r\n\r\n    if (isActive && secondsPomodoro !== 0) {\r\n      interval = setInterval(() => {\r\n        setSecondsPomodoro((seconds) => seconds - 1);\r\n      }, 1000);\r\n    } else if (!isActive && secondsPomodoro !== 0) {\r\n      clearInterval(interval);\r\n    } else if (isActive && secondsPomodoro === 0) {\r\n      // need to check isActive here or you'll get two notifications\r\n      setIsActive(false);\r\n      notificationPermissionPomodoro();\r\n      updatePomodorosArray();\r\n    }\r\n    return () => clearInterval(interval); // return clearInterval for clean up\r\n  }, [isActive, secondsPomodoro]); // need isActive here in the dependency array to start the useEffect or secondsPomodoro will never go down\r\n\r\n  // second useEffect for the Break timer, almost exactly the same\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    // local notifications for Break finished\r\n    function notificationPermissionBreak() {\r\n      Notification.requestPermission().then((perm) => {\r\n        if (perm === \"granted\") {\r\n          const notification = new Notification(\"Break Finished\", {\r\n            body: \"Start Focusing?\",\r\n            data: { test: \"Data\" },\r\n            icon: mango,\r\n          });\r\n          // click the notification to immediately start break\r\n          notification.addEventListener(\"click\", (e) => {\r\n            // console.log(e);\r\n            resetPomodoro();\r\n            resetBreak();\r\n            togglePomodoro();\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    if (isBreakActive && secondsBreak !== 0) {\r\n      interval = setInterval(() => {\r\n        setSecondsBreak((seconds) => seconds - 1);\r\n      }, 1000);\r\n    } else if (!isBreakActive && secondsBreak !== 0) {\r\n      clearInterval(interval);\r\n    } else if (isBreakActive && secondsBreak === 0) {\r\n      setIsBreakActive(false);\r\n      notificationPermissionBreak();\r\n    }\r\n    return () => clearInterval(interval); // return clearInterval for clean up\r\n  }, [isBreakActive, secondsBreak]);\r\n\r\n  function togglePomodoro() {\r\n    setIsActive((prev) => !prev);\r\n  }\r\n\r\n  function toggleBreak() {\r\n    setIsBreakActive((prev) => !prev);\r\n  }\r\n\r\n  function resetPomodoro() {\r\n    setSecondsPomodoro(1500);\r\n    if (!isBreakActive) setSecondsBreak(300);\r\n    setIsActive(false);\r\n    // isPomodoro = false;\r\n  }\r\n\r\n  function resetBreak() {\r\n    setSecondsBreak(300);\r\n    setIsBreakActive(false);\r\n  }\r\n\r\n  // this seems to work for which one to display, I also tried checking for isActive but it didn't work as intended\r\n  function startOrResumePomodoro() {\r\n    if (secondsPomodoro === 1500) {\r\n      return \"Start\";\r\n    } else if (secondsPomodoro === 0) {\r\n      return \"Reset\";\r\n    } else {\r\n      return \"Resume\";\r\n    }\r\n  }\r\n  function startOrResumeBreak() {\r\n    if (secondsBreak === 300) {\r\n      return \"Start\";\r\n    } else if (secondsBreak === 0) {\r\n      return \"Reset\";\r\n    } else {\r\n      return \"Resume\";\r\n    }\r\n  }\r\n\r\n  // get the current time in seconds\r\n  const currentTime = () => {\r\n    const currentTime = new Date().getTime();\r\n    return Math.floor(currentTime / 1000);\r\n  };\r\n\r\n  // add to the pomodoros array on the database\r\n  async function handleSubmit(event) {\r\n    console.log(pomodoroFormData);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(pomodoroFormData),\r\n    };\r\n\r\n    fetch(\"/api/pomodoro-add-pomodoros\", requestOptions).then((response) => {\r\n      console.log(response);\r\n      return response.json();\r\n    });\r\n  }\r\n\r\n  function handleChangeUsername(event) {\r\n    setPomodoroFormData({ ...pomodoroFormData, username: event.target.value });\r\n  }\r\n\r\n  function handleChangePomodoro(event) {\r\n    setPomodoroFormData({ ...pomodoroFormData, pomodoro: event.target.value });\r\n  }\r\n\r\n  // get pomodoros from database and save to state to be passed down\r\n  // probably better to do it here versus within the contribution graph component\r\n  useEffect(() => {\r\n    const getPomodoros = async () => {\r\n      const data = await fetch(\"/api/pomodoro-get\");\r\n      const posts_data = await data.json();\r\n      setPomodoroDatabase(posts_data[0].timestamps);\r\n      // console.log(posts_data[0].timestamps);\r\n    };\r\n    getPomodoros();\r\n  }, []);\r\n\r\n  // update the calendar Schema in case it's older than today's date\r\n  // when I put this in ContributionGraph it was double counting pomodoros\r\n\r\n  useEffect(() => {\r\n    const updateCalendar = async () => {\r\n      const data = await fetch(\"/api/calendar-update\");\r\n      const get_data = await data.json();\r\n      // console.log(get_data);\r\n    };\r\n    updateCalendar();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"white-text\">Pomodoro</h1>\r\n      <hr className=\"app-line\"></hr>\r\n      <div>\r\n        <form className=\"white-text\" onSubmit={handleSubmit}>\r\n          <label>\r\n            username\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              onChange={handleChangeUsername}\r\n              value={pomodoroFormData.username || \"\"}\r\n            />\r\n          </label>\r\n          <label>\r\n            pomodoro\r\n            <input\r\n              type=\"text\"\r\n              name=\"pomodoro\"\r\n              onChange={handleChangePomodoro}\r\n              value={pomodoroFormData.timestamps || \"\"}\r\n            />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n      <div className=\"timer-container\">\r\n        <PomodoroTimer\r\n          minutes={pomodoroTimeDisplay.minutes}\r\n          seconds={pomodoroTimeDisplay.seconds}\r\n          activePomodoro={isActive}\r\n          activeBreak={isBreakActive}\r\n          active={isActive}\r\n          toggle={togglePomodoro}\r\n          reset={resetPomodoro}\r\n          startOrResume={startOrResumePomodoro}\r\n          type=\"pomodoro\"\r\n        />\r\n        <PomodoroTimer\r\n          minutes={breakTimeDisplay.minutes}\r\n          seconds={breakTimeDisplay.seconds}\r\n          activePomodoro={isActive}\r\n          activeBreak={isBreakActive}\r\n          active={isBreakActive}\r\n          toggle={toggleBreak}\r\n          reset={resetBreak}\r\n          startOrResume={startOrResumeBreak}\r\n          type=\"break\"\r\n        />\r\n      </div>\r\n      <ContributionGraph timestamps={pomodoroDatabase} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pomodoro;\r\n","/home/lawrence/Projects/habit-tracker/frontend/src/components/Weather.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/PomodoroTimer.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit-Add.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit-Delete.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Analytics.js",["107"],[],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport ContributionGraph from \"../components/ContributionGraph.js\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\n\r\nfunction Analytics() {\r\n  const [habits, setHabits] = useState([]);\r\n  const [currentHabitId, setCurrentHabitId] = useState(\"\");\r\n\r\n  const [habitsUpdateArray, setHabitsUpdateArray] = useState([]);\r\n\r\n  const [renderState, setRenderState] = useState(false);\r\n\r\n  const [randomColor, setRandomColor] = useState(\"\");\r\n\r\n  // MUI code for the dropdown menu\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  // clicking the menu item will set the habit Id and then render the contribution graph\r\n  const handleClickDisplayGraph = (event) => {\r\n    setCurrentHabitId(event.target.id);\r\n  };\r\n\r\n  // setHabits to pull from our database\r\n  useEffect(() => {\r\n    const getHabits = async () => {\r\n      const data = await fetch(\"/api/habit-get\");\r\n      const get_data = await data.json();\r\n      // console.log(get_data);\r\n      setHabits(get_data);\r\n      setRenderState(true);\r\n    };\r\n    getHabits();\r\n  }, [renderState]);\r\n\r\n  // add timestamps to Day, same logic as what we are using in HabitTracker.js\r\n  // we'll use the dates in Contribution Graph to be passed upwards to the parent Analytics so that we can help calculate our time offset\r\n  function addTimestamps(date) {\r\n    function calculateOffset() {\r\n      return convertDateToUnixTime(date) + (currentTime() % 86400);\r\n    }\r\n\r\n    setHabits((prevHabits) =>\r\n      prevHabits.map((prevHabit) => {\r\n        if (prevHabit.id === currentHabitId) {\r\n          let needsToBeAdded = true;\r\n\r\n          // checking if the update exists in our array, if not we'll add it\r\n          for (const exist of habitsUpdateArray) {\r\n            if (exist.id === currentHabitId) {\r\n              needsToBeAdded = false;\r\n            }\r\n          }\r\n          if (needsToBeAdded) {\r\n            // console.log(\"adding into updates array\");\r\n            setHabitsUpdateArray((prevValue) => [...prevValue, prevHabit]);\r\n          }\r\n          // modify the timestamps of the habit in the update array\r\n          setHabitsUpdateArray((prevUpdates) =>\r\n            prevUpdates.map((prevUpdate) => {\r\n              if (prevUpdate.id === currentHabitId) {\r\n                return {\r\n                  ...prevUpdate,\r\n                  timestamps: [...prevHabit.timestamps, calculateOffset()],\r\n                };\r\n              } else {\r\n                return prevUpdate;\r\n              }\r\n            })\r\n          );\r\n          // update the timestamps in the habits array\r\n          return {\r\n            ...prevHabit,\r\n            timestamps: [...prevHabit.timestamps, calculateOffset()], // use spread here instead of push works better for state\r\n          };\r\n        } else {\r\n          return prevHabit;\r\n        }\r\n      })\r\n    );\r\n    // console.log(habitsUpdateArray);\r\n  }\r\n\r\n  const convertDateToUnixTime = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.getTime() / 1000;\r\n  };\r\n\r\n  const currentTime = () => {\r\n    const currentTime = new Date().getTime();\r\n    return Math.floor(currentTime / 1000);\r\n  };\r\n\r\n  // timestamps for each habit are updated every 10 seconds but dividing it out into it's own useEffect\r\n  // I am using the habitsUpdate array so that we're not constantly pushing updates onto the database and we'll only make calls for habits that are getting modified\r\n  useEffect(() => {\r\n    async function updateTimestamps() {\r\n      for (const habit of habitsUpdateArray) {\r\n        let data = {\r\n          habit_name: habit.habit_name,\r\n          timestamps: habit.timestamps,\r\n        };\r\n\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        };\r\n        fetch(\"/api/habit-update-timestamps\", requestOptions).then(\r\n          setHabitsUpdateArray(() => {\r\n            return []; // clear out the array when we're done updating\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    function checkAfterTenSeconds() {\r\n      updateTimestamps();\r\n    }\r\n\r\n    const timer = setInterval(() => checkAfterTenSeconds(), 10000);\r\n    return () => clearInterval(timer);\r\n  }, [habitsUpdateArray]);\r\n\r\n  // function createRandomColor() {\r\n  //   return Math.floor(Math.random() * 0xffffff).toString(16);\r\n  // }\r\n\r\n  useEffect(() => {\r\n    setRandomColor(Math.floor(Math.random() * 0xffffff).toString(16));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"white-text\">Analytics</h1>\r\n      <Button\r\n        id=\"basic-button\"\r\n        aria-controls={open ? \"basic-menu\" : undefined}\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        onClick={handleClick}\r\n      >\r\n        Dashboard\r\n      </Button>\r\n      <Menu\r\n        id=\"basic-menu\"\r\n        anchorEl={anchorEl}\r\n        open={open}\r\n        onClose={handleClose}\r\n        MenuListProps={{\r\n          \"aria-labelledby\": \"basic-button\",\r\n        }}\r\n      >\r\n        {habits.map((habit) => {\r\n          return (\r\n            <MenuItem\r\n              onClick={handleClickDisplayGraph}\r\n              onClose={handleClose}\r\n              // onBlur={handleClose}\r\n              id={habit.id}\r\n            >\r\n              {habit.habit_name}\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Menu>\r\n\r\n      <div className=\"contribution-graph-container\">\r\n        {habits.map((habit) => {\r\n          if (habit.id === currentHabitId) {\r\n            return (\r\n              <ContributionGraph\r\n                timestamps={habit.timestamps}\r\n                id={habit.id}\r\n                add_timestamps={addTimestamps}\r\n                randomColor={randomColor}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Analytics;\r\n","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Counters.js",[],[],{"ruleId":"108","severity":1,"message":"109","line":6,"column":10,"nodeType":"110","messageId":"111","endLine":6,"endColumn":22},{"ruleId":"112","severity":1,"message":"113","line":114,"column":42,"nodeType":"114","messageId":"115","endLine":114,"endColumn":44},{"ruleId":"116","severity":1,"message":"117","line":11,"column":6,"nodeType":"118","endLine":11,"endColumn":8,"suggestions":"119"},{"ruleId":"116","severity":1,"message":"120","line":129,"column":6,"nodeType":"118","endLine":129,"endColumn":35,"suggestions":"121"},{"ruleId":"108","severity":1,"message":"122","line":218,"column":13,"nodeType":"110","messageId":"111","endLine":218,"endColumn":21},{"ruleId":"112","severity":1,"message":"113","line":181,"column":29,"nodeType":"114","messageId":"115","endLine":181,"endColumn":31},"no-unused-vars","'isPropsReady' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["123"],"React Hook useEffect has a missing dependency: 'resetPomodoro'. Either include it or remove the dependency array.",["124"],"'get_data' is assigned a value but never used.",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [navigate]",{"range":"129","text":"130"},"Update the dependencies array to be: [isBreakActive, resetPomodoro, secondsBreak]",{"range":"131","text":"132"},[241,243],"[navigate]",[4634,4663],"[isBreakActive, resetPomodoro, secondsBreak]"]