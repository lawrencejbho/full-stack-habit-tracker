[{"/home/lawrence/Projects/habit-tracker/frontend/src/index.js":"1","/home/lawrence/Projects/habit-tracker/frontend/src/App.js":"2","/home/lawrence/Projects/habit-tracker/frontend/src/components/Add.js":"3","/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit.js":"4","/home/lawrence/Projects/habit-tracker/frontend/src/components/TodayDate.js":"5","/home/lawrence/Projects/habit-tracker/frontend/src/components/ContributionGraph.js":"6","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Timer.js":"7","/home/lawrence/Projects/habit-tracker/frontend/src/components/Plus.js":"8","/home/lawrence/Projects/habit-tracker/frontend/src/components/Minus.js":"9","/home/lawrence/Projects/habit-tracker/frontend/src/components/Delete.js":"10","/home/lawrence/Projects/habit-tracker/frontend/src/components/Box.js":"11","/home/lawrence/Projects/habit-tracker/frontend/src/components/FakeData.js":"12","/home/lawrence/Projects/habit-tracker/frontend/src/pages/HabitTracker.js":"13","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Navbar.js":"14","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Home.js":"15","/home/lawrence/Projects/habit-tracker/frontend/src/pages/NotFound.js":"16","/home/lawrence/Projects/habit-tracker/frontend/src/pages/firebase.js":"17","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Pomodoro.js":"18"},{"size":211,"mtime":1662317542920,"results":"19","hashOfConfig":"20"},{"size":1093,"mtime":1662507605260,"results":"21","hashOfConfig":"20"},{"size":1140,"mtime":1662317542910,"results":"22","hashOfConfig":"20"},{"size":1388,"mtime":1662317542910,"results":"23","hashOfConfig":"20"},{"size":725,"mtime":1662317542910,"results":"24","hashOfConfig":"20"},{"size":491,"mtime":1662854544340,"results":"25","hashOfConfig":"20"},{"size":3554,"mtime":1663721949190,"results":"26","hashOfConfig":"20"},{"size":318,"mtime":1663722267540,"results":"27","hashOfConfig":"20"},{"size":327,"mtime":1663722261230,"results":"28","hashOfConfig":"20"},{"size":354,"mtime":1663722235950,"results":"29","hashOfConfig":"20"},{"size":873,"mtime":1662317542910,"results":"30","hashOfConfig":"20"},{"size":22174,"mtime":1662317542910,"results":"31","hashOfConfig":"20"},{"size":2669,"mtime":1662689722480,"results":"32","hashOfConfig":"20"},{"size":513,"mtime":1662507503900,"results":"33","hashOfConfig":"20"},{"size":343,"mtime":1662490643060,"results":"34","hashOfConfig":"20"},{"size":341,"mtime":1662500521610,"results":"35","hashOfConfig":"20"},{"size":1807,"mtime":1662690353960,"results":"36","hashOfConfig":"20"},{"size":563,"mtime":1663721190860,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1w3m9ng",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"41"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"41"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/home/lawrence/Projects/habit-tracker/frontend/src/index.js",[],[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/App.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Add.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Habit.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/TodayDate.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/ContributionGraph.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Timer.js",["97","98"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Pomodoro from \"./Pomodoro.js\";\r\nimport \"./timer.css\";\r\n\r\nfunction Timer() {\r\n  const [secondsPomodoro, setSecondsPomodoro] = useState(11);\r\n  const [secondsBreak, setSecondsBreak] = useState(10);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const pomodoroTimeDisplay = timeConversion(secondsPomodoro);\r\n  const breakTimeDisplay = timeConversion(secondsBreak);\r\n\r\n  let isPomodoro = false;\r\n\r\n  // not sure if this is the proper way to do this but I leave seconds as the state variable and use a normal variable that uses seconds with derived state\r\n  function timeConversion(seconds) {\r\n    let time = {};\r\n    if (seconds > 0) {\r\n      time = {\r\n        minutes:\r\n          Math.floor(seconds / 60) > 10\r\n            ? Math.floor(seconds / 60)\r\n            : `0${Math.floor(seconds / 60)}`,\r\n        seconds: seconds % 60 >= 10 ? seconds % 60 : `0${seconds % 60}`,\r\n      };\r\n    } else if (seconds === 0) {\r\n      time = {\r\n        minutes: \"00\",\r\n        seconds: \"00\",\r\n      };\r\n    }\r\n    return time;\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    function timerFinished() {\r\n      console.log(\"it's over\");\r\n      notificationPermission();\r\n      isPomodoro = true;\r\n    }\r\n\r\n    if (isActive && secondsPomodoro !== 0) {\r\n      interval = setInterval(() => {\r\n        setSecondsPomodoro((seconds) => seconds - 1);\r\n      }, 1000);\r\n    } else if (!isActive && secondsPomodoro !== 0) {\r\n      clearInterval(interval);\r\n    } else if (secondsPomodoro === 0) {\r\n      timerFinished();\r\n    }\r\n    return () => clearInterval(interval); // return clearInterval for clean up\r\n  }, [isActive, secondsPomodoro]);\r\n\r\n  // local notifications\r\n\r\n  function notificationPermission() {\r\n    Notification.requestPermission().then((perm) => {\r\n      if (perm === \"granted\") {\r\n        const notification = new Notification(\"Pomodoro Finished\", {\r\n          body: \"Start Break?\",\r\n          data: { test: \"Data\" },\r\n          icon: \"mango.png\",\r\n        });\r\n        // click the notification to immediately start break\r\n        notification.addEventListener(\"click\", (e) => {\r\n          // console.log(e);\r\n          startBreak();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  function toggle() {\r\n    setIsActive((prev) => !prev);\r\n  }\r\n\r\n  function reset() {\r\n    setSecondsPomodoro(1500);\r\n    setSecondsBreak(300);\r\n    setIsActive(false);\r\n    isPomodoro = false;\r\n  }\r\n\r\n  // this seems to work for which one to display, I also tried checking for isActive but it didn't work as intended\r\n  function startOrResume() {\r\n    if (secondsPomodoro === 1500) {\r\n      return \"Start\";\r\n    } else {\r\n      return \"Resume\";\r\n    }\r\n  }\r\n\r\n  function startBreak() {\r\n    setSecondsPomodoro(300);\r\n    setIsActive(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"white-text\">Pomodoro</h1>\r\n      <hr className=\"app-line\"></hr>\r\n      <div className=\"timer-container\">\r\n        <Pomodoro\r\n          minutes={pomodoroTimeDisplay.minutes}\r\n          seconds={pomodoroTimeDisplay.seconds}\r\n          active={isActive}\r\n          toggle={toggle}\r\n          reset={reset}\r\n          startOrResume={startOrResume}\r\n          type=\"pomodoro\"\r\n        />\r\n        <Pomodoro\r\n          minutes={breakTimeDisplay.minutes}\r\n          seconds={breakTimeDisplay.seconds}\r\n          active={isActive}\r\n          toggle={toggle}\r\n          reset={reset}\r\n          startOrResume={startOrResume}\r\n          type=\"break\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","/home/lawrence/Projects/habit-tracker/frontend/src/components/Plus.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Minus.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Delete.js",[],[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/Box.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/components/FakeData.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/HabitTracker.js",["99"],[],"import React, { useState, useEffect } from \"react\";\r\nimport Habit from \"../components/Habit.js\";\r\nimport Add from \"../components/Add.js\";\r\nimport { nanoid } from \"nanoid\";\r\nimport TodayDate from \"../components/TodayDate.js\";\r\nimport ContributionGraph from \"../components/ContributionGraph.js\";\r\n\r\nfunction HabitTracker() {\r\n  // need to define localStorage here to grab the key habits\r\n  const savedHabit = localStorage.getItem(\"habits\");\r\n\r\n  // our habits array that saves our habits to be displayed later, will use the localStorage if it exists\r\n  const [habits, setHabits] = useState(() => JSON.parse(savedHabit) || []);\r\n\r\n  // this help us track the current Habit Id, allows us to very easily track a Habit based on the ID when we use things like mouseOver\r\n  const [currentHabitId, setCurrentHabitId] = useState(\r\n    (habits[0] && habits[0].id) || \"\"\r\n  );\r\n\r\n  // useEffect will track any changes to habits array and modify the value in localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"habits\", JSON.stringify(habits));\r\n  }, [habits]);\r\n\r\n  // checks for the proper ID and will increment it's counter value by 1\r\n  function plusCounter() {\r\n    setHabits((prevHabits) =>\r\n      prevHabits.map((prevHabit) => {\r\n        return prevHabit.id === currentHabitId\r\n          ? { ...prevHabit, counter: prevHabit.counter + 1 }\r\n          : prevHabit;\r\n      })\r\n    );\r\n  }\r\n\r\n  function minusCounter() {\r\n    setHabits((prevHabits) =>\r\n      prevHabits.map((prevHabit) => {\r\n        return prevHabit.id === currentHabitId\r\n          ? { ...prevHabit, counter: prevHabit.counter - 1 }\r\n          : prevHabit;\r\n      })\r\n    );\r\n  }\r\n\r\n  // console.log(habits);\r\n\r\n  // Pass this function to Add, it will pass us back the specific Habit so we can add the new habit into our Habits array\r\n  function addHabit(newHabit) {\r\n    setHabits((prevHabits) => {\r\n      return [...prevHabits, newHabit];\r\n    });\r\n  }\r\n\r\n  // Use filter to keep everything but the currentHabitId which comes when we mouseOver\r\n  function deleteHabit() {\r\n    setHabits((prevHabits) =>\r\n      prevHabits.filter((habit) => habit.id !== currentHabitId)\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        <div className=\"card-container\">\r\n          <Add onAdd={addHabit} setCurrentHabitId={setCurrentHabitId} />\r\n          <Habit\r\n            habits={habits}\r\n            plusCounter={plusCounter}\r\n            minusCounter={minusCounter}\r\n            deleteHabit={deleteHabit}\r\n            setCurrentHabitId={setCurrentHabitId}\r\n          />\r\n          <TodayDate />\r\n        </div>\r\n      </main>\r\n      <ContributionGraph />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HabitTracker;\r\n","/home/lawrence/Projects/habit-tracker/frontend/src/pages/Navbar.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Home.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/NotFound.js",["100"],[],"import React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction NotFound() {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      navigate(\"/\");\r\n    }, 2000);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>Not Found</h1>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","/home/lawrence/Projects/habit-tracker/frontend/src/pages/firebase.js",[],[],"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Pomodoro.js",[],[],{"ruleId":"101","severity":1,"message":"102","line":12,"column":7,"nodeType":"103","messageId":"104","endLine":12,"endColumn":17},{"ruleId":"105","severity":1,"message":"106","line":40,"column":20,"nodeType":"107","endLine":40,"endColumn":24},{"ruleId":"101","severity":1,"message":"108","line":4,"column":10,"nodeType":"103","messageId":"104","endLine":4,"endColumn":16},{"ruleId":"105","severity":1,"message":"109","line":11,"column":6,"nodeType":"110","endLine":11,"endColumn":8,"suggestions":"111"},"no-unused-vars","'isPomodoro' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'isPomodoro' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'nanoid' is defined but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["112"],{"desc":"113","fix":"114"},"Update the dependencies array to be: [navigate]",{"range":"115","text":"116"},[241,243],"[navigate]"]