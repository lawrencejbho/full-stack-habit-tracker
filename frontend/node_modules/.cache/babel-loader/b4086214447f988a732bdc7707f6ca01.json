{"ast":null,"code":"var _jsxFileName = \"/home/lawrence/Projects/habit-tracker/frontend/src/components/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  // this API needs to start as an object\n  const [weatherData, setWeatherData] = useState({});\n  const [ready, setReady] = useState(false);\n  const url = \"https://api.openweathermap.org/data/2.5/weather?lat=37.7621407&lon=-122.4745359&appid=6d794b4b65ee6ae6ad174f26bb0daf29&units=imperial\";\n  useEffect(() => {\n    getWeather();\n  }, []);\n\n  async function getWeather() {\n    fetch(url).then(response => response.json()).then(data => {\n      console.log(data);\n      return setWeatherData(data);\n    });\n  } // wind logic\n\n\n  let wind = \"not windy\";\n\n  if (weatherData.wind > 15 && weatherData.wind < 25) {\n    wind = \"kinda windy\";\n  } else if (weatherData.wind > 25) {\n    wind = \"very windy\";\n  } else {} //convert from unix to date\n\n\n  function convertToTime(unix_date) {\n    const period = \"am\";\n    const date = new Date(unix_date * 1000);\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const string = `${convertHours(hours)}:${padTo2Digits(minutes)} ${period}`;\n    return string;\n\n    function padTo2Digits(num) {\n      return num.toString().padStart(2, \"0\");\n    }\n\n    function convertHours(num) {\n      if (num > 12) num = num % 12;\n      period = \"pm\";\n      return num;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"white-text\",\n      children: weatherData.timezone && weatherData.main.feels_like\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"white-text\",\n      children: weatherData.timezone && weatherData.weather[0].description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"white-text\",\n      children: wind\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"white-text\",\n      children: weatherData.timezone && convertToTime(weatherData.sys.sunrise)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"white-text\",\n      children: weatherData.timezone && convertToTime(weatherData.sys.sunset)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Weather, \"3ta83rOFK6BFqu84G+Gl1M2PMck=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","Weather","weatherData","setWeatherData","ready","setReady","url","getWeather","fetch","then","response","json","data","console","log","wind","convertToTime","unix_date","period","date","Date","hours","getHours","minutes","getMinutes","string","convertHours","padTo2Digits","num","toString","padStart","timezone","main","feels_like","weather","description","sys","sunrise","sunset"],"sources":["/home/lawrence/Projects/habit-tracker/frontend/src/components/Weather.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Weather() {\r\n  // this API needs to start as an object\r\n  const [weatherData, setWeatherData] = useState({});\r\n  const [ready, setReady] = useState(false);\r\n  const url =\r\n    \"https://api.openweathermap.org/data/2.5/weather?lat=37.7621407&lon=-122.4745359&appid=6d794b4b65ee6ae6ad174f26bb0daf29&units=imperial\";\r\n\r\n  useEffect(() => {\r\n    getWeather();\r\n  }, []);\r\n\r\n  async function getWeather() {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        return setWeatherData(data);\r\n      });\r\n  }\r\n\r\n  // wind logic\r\n  let wind = \"not windy\";\r\n  if (weatherData.wind > 15 && weatherData.wind < 25) {\r\n    wind = \"kinda windy\";\r\n  } else if (weatherData.wind > 25) {\r\n    wind = \"very windy\";\r\n  } else {\r\n  }\r\n\r\n  //convert from unix to date\r\n  function convertToTime(unix_date) {\r\n    const period = \"am\";\r\n    const date = new Date(unix_date * 1000);\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const string = `${convertHours(hours)}:${padTo2Digits(minutes)} ${period}`;\r\n    return string;\r\n\r\n    function padTo2Digits(num) {\r\n      return num.toString().padStart(2, \"0\");\r\n    }\r\n    function convertHours(num) {\r\n      if (num > 12) num = num % 12;\r\n      period = \"pm\";\r\n      return num;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p className=\"white-text\">\r\n        {weatherData.timezone && weatherData.main.feels_like}\r\n      </p>\r\n      <p className=\"white-text\">\r\n        {weatherData.timezone && weatherData.weather[0].description}\r\n      </p>\r\n      <p className=\"white-text\">{wind}</p>\r\n      <p className=\"white-text\">\r\n        {weatherData.timezone && convertToTime(weatherData.sys.sunrise)}\r\n      </p>\r\n      <p className=\"white-text\">\r\n        {weatherData.timezone && convertToTime(weatherData.sys.sunset)}\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,SAASC,OAAT,GAAmB;EAAA;;EACjB;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;EACA,MAAMO,GAAG,GACP,uIADF;EAGAN,SAAS,CAAC,MAAM;IACdO,UAAU;EACX,CAFQ,EAEN,EAFM,CAAT;;EAIA,eAAeA,UAAf,GAA4B;IAC1BC,KAAK,CAACF,GAAD,CAAL,CACGG,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;MACdC,OAAO,CAACC,GAAR,CAAYF,IAAZ;MACA,OAAOT,cAAc,CAACS,IAAD,CAArB;IACD,CALH;EAMD,CAlBgB,CAoBjB;;;EACA,IAAIG,IAAI,GAAG,WAAX;;EACA,IAAIb,WAAW,CAACa,IAAZ,GAAmB,EAAnB,IAAyBb,WAAW,CAACa,IAAZ,GAAmB,EAAhD,EAAoD;IAClDA,IAAI,GAAG,aAAP;EACD,CAFD,MAEO,IAAIb,WAAW,CAACa,IAAZ,GAAmB,EAAvB,EAA2B;IAChCA,IAAI,GAAG,YAAP;EACD,CAFM,MAEA,CACN,CA3BgB,CA6BjB;;;EACA,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;IAChC,MAAMC,MAAM,GAAG,IAAf;IACA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASH,SAAS,GAAG,IAArB,CAAb;IACA,MAAMI,KAAK,GAAGF,IAAI,CAACG,QAAL,EAAd;IACA,MAAMC,OAAO,GAAGJ,IAAI,CAACK,UAAL,EAAhB;IACA,MAAMC,MAAM,GAAI,GAAEC,YAAY,CAACL,KAAD,CAAQ,IAAGM,YAAY,CAACJ,OAAD,CAAU,IAAGL,MAAO,EAAzE;IACA,OAAOO,MAAP;;IAEA,SAASE,YAAT,CAAsBC,GAAtB,EAA2B;MACzB,OAAOA,GAAG,CAACC,QAAJ,GAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CAAP;IACD;;IACD,SAASJ,YAAT,CAAsBE,GAAtB,EAA2B;MACzB,IAAIA,GAAG,GAAG,EAAV,EAAcA,GAAG,GAAGA,GAAG,GAAG,EAAZ;MACdV,MAAM,GAAG,IAAT;MACA,OAAOU,GAAP;IACD;EACF;;EAED,oBACE;IAAA,wBACE;MAAG,SAAS,EAAC,YAAb;MAAA,UACG1B,WAAW,CAAC6B,QAAZ,IAAwB7B,WAAW,CAAC8B,IAAZ,CAAiBC;IAD5C;MAAA;MAAA;MAAA;IAAA,QADF,eAIE;MAAG,SAAS,EAAC,YAAb;MAAA,UACG/B,WAAW,CAAC6B,QAAZ,IAAwB7B,WAAW,CAACgC,OAAZ,CAAoB,CAApB,EAAuBC;IADlD;MAAA;MAAA;MAAA;IAAA,QAJF,eAOE;MAAG,SAAS,EAAC,YAAb;MAAA,UAA2BpB;IAA3B;MAAA;MAAA;MAAA;IAAA,QAPF,eAQE;MAAG,SAAS,EAAC,YAAb;MAAA,UACGb,WAAW,CAAC6B,QAAZ,IAAwBf,aAAa,CAACd,WAAW,CAACkC,GAAZ,CAAgBC,OAAjB;IADxC;MAAA;MAAA;MAAA;IAAA,QARF,eAWE;MAAG,SAAS,EAAC,YAAb;MAAA,UACGnC,WAAW,CAAC6B,QAAZ,IAAwBf,aAAa,CAACd,WAAW,CAACkC,GAAZ,CAAgBE,MAAjB;IADxC;MAAA;MAAA;MAAA;IAAA,QAXF;EAAA,gBADF;AAiBD;;GAjEQrC,O;;KAAAA,O;AAmET,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}