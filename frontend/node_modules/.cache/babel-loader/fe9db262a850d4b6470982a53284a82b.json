{"ast":null,"code":"var _jsxFileName = \"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./timer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Timer() {\n  _s();\n\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false); // add a second every 1000 milliseconds\n\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval); // return clearInterval for clean up\n  }, [isActive, seconds]);\n\n  function toggle() {\n    setIsActive(prev => !prev);\n  }\n\n  function reset() {\n    setSeconds(0);\n    setIsActive(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Focus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `timer-button-active-${isActive ? \"active\" : \"inactive\"}`,\n        onClick: toggle,\n        children: isActive ? \"Pause\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"timer-button\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"HjAIbd49zoP8n+oOlWwUpn38Z08=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useEffect","useState","Timer","seconds","setSeconds","isActive","setIsActive","interval","setInterval","clearInterval","toggle","prev","reset"],"sources":["/home/lawrence/Projects/habit-tracker/frontend/src/pages/Timer.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./timer.css\";\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  // add a second every 1000 milliseconds\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        setSeconds((seconds) => seconds + 1);\r\n      }, 1000);\r\n    } else if (!isActive && seconds !== 0) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval); // return clearInterval for clean up\r\n  }, [isActive, seconds]);\r\n\r\n  function toggle() {\r\n    setIsActive((prev) => !prev);\r\n  }\r\n\r\n  function reset() {\r\n    setSeconds(0);\r\n    setIsActive(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Focus</h1>\r\n      <hr></hr>\r\n      <div>\r\n        <h1>{seconds}</h1>\r\n        <button\r\n          className={`timer-button-active-${isActive ? \"active\" : \"inactive\"}`}\r\n          onClick={toggle}\r\n        >\r\n          {isActive ? \"Pause\" : \"Start\"}\r\n        </button>\r\n        <button className=\"timer-button\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;;;AAEA,SAASC,KAAT,GAAiB;EAAA;;EACf,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC,CAFe,CAIf;;EACAD,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,GAAG,IAAf;;IACA,IAAIF,QAAJ,EAAc;MACZE,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC3BJ,UAAU,CAAED,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAV;MACD,CAFqB,EAEnB,IAFmB,CAAtB;IAGD,CAJD,MAIO,IAAI,CAACE,QAAD,IAAaF,OAAO,KAAK,CAA7B,EAAgC;MACrCM,aAAa,CAACF,QAAD,CAAb;IACD;;IACD,OAAO,MAAME,aAAa,CAACF,QAAD,CAA1B,CATc,CASwB;EACvC,CAVQ,EAUN,CAACF,QAAD,EAAWF,OAAX,CAVM,CAAT;;EAYA,SAASO,MAAT,GAAkB;IAChBJ,WAAW,CAAEK,IAAD,IAAU,CAACA,IAAZ,CAAX;EACD;;EAED,SAASC,KAAT,GAAiB;IACfR,UAAU,CAAC,CAAD,CAAV;IACAE,WAAW,CAAC,KAAD,CAAX;EACD;;EAED,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAA,wBACE;QAAA,UAAKH;MAAL;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,SAAS,EAAG,uBAAsBE,QAAQ,GAAG,QAAH,GAAc,UAAW,EADrE;QAEE,OAAO,EAAEK,MAFX;QAAA,UAIGL,QAAQ,GAAG,OAAH,GAAa;MAJxB;QAAA;QAAA;QAAA;MAAA,QAFF,eAQE;QAAQ,SAAS,EAAC,cAAlB;QAAiC,OAAO,EAAEO,KAA1C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QARF;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD;;GA5CQV,K;;KAAAA,K;AA8CT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}