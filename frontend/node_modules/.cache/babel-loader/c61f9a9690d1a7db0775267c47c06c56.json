{"ast":null,"code":"var _jsxFileName = \"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./timer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Timer() {\n  _s();\n\n  const [seconds, setSeconds] = useState(2);\n  const [isActive, setIsActive] = useState(false);\n  const timeDisplay = timeConversion(); // not sure if this is the proper way to do this but I leave seconds as the state variable and use a normal variable that uses seconds with derived state\n\n  function timeConversion() {\n    let time = {};\n\n    if (seconds > 0) {\n      time = {\n        minutes: Math.floor(seconds / 60) > 10 ? Math.floor(seconds / 60) : `  ${Math.floor(seconds / 60)}`,\n        seconds: seconds % 60 > 10 ? seconds % 60 : `0${seconds % 60}`\n      };\n    } else if (seconds === 0) {\n      time = {\n        minutes: \"00\",\n        seconds: \"00\"\n      };\n    }\n\n    return time;\n  } // subtract a second every 1000 milliseconds\n\n\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => {\n          if (seconds > 0) {\n            return seconds - 1;\n          } else {\n            return seconds;\n          }\n        });\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval); // return clearInterval for clean up\n  }, [isActive, seconds]);\n\n  function toggle() {\n    setIsActive(prev => !prev);\n  }\n\n  function reset() {\n    setSeconds(1500);\n    setIsActive(false);\n  } // this seems to work for which one to display, I also tried checking for isActive but it didn't work as intended\n\n\n  function startOrResume() {\n    if (seconds === 1500) {\n      return \"Start\";\n    } else {\n      return \"Resume\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"white-text\",\n      children: \"Pomodoro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"app-line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"white-text\",\n        children: [\" \", `${timeDisplay.minutes}:${timeDisplay.seconds}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `timer-button-status-${isActive ? \"active\" : \"inactive\"}`,\n        onClick: toggle,\n        children: isActive ? \"Pause\" : startOrResume()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"timer-button\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"HFTzI9ggSHcxe6c15oxZ2fqs9zk=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useEffect","useState","Timer","seconds","setSeconds","isActive","setIsActive","timeDisplay","timeConversion","time","minutes","Math","floor","interval","setInterval","clearInterval","toggle","prev","reset","startOrResume"],"sources":["/home/lawrence/Projects/habit-tracker/frontend/src/pages/Timer.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./timer.css\";\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(2);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const timeDisplay = timeConversion();\r\n\r\n  // not sure if this is the proper way to do this but I leave seconds as the state variable and use a normal variable that uses seconds with derived state\r\n  function timeConversion() {\r\n    let time = {};\r\n    if (seconds > 0) {\r\n      time = {\r\n        minutes:\r\n          Math.floor(seconds / 60) > 10\r\n            ? Math.floor(seconds / 60)\r\n            : `  ${Math.floor(seconds / 60)}`,\r\n        seconds: seconds % 60 > 10 ? seconds % 60 : `0${seconds % 60}`,\r\n      };\r\n    } else if (seconds === 0) {\r\n      time = {\r\n        minutes: \"00\",\r\n        seconds: \"00\",\r\n      };\r\n    }\r\n\r\n    return time;\r\n  }\r\n\r\n  // subtract a second every 1000 milliseconds\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        setSeconds((seconds) => {\r\n          if (seconds > 0) {\r\n            return seconds - 1;\r\n          } else {\r\n            return seconds;\r\n          }\r\n        });\r\n      }, 1000);\r\n    } else if (!isActive && seconds !== 0) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval); // return clearInterval for clean up\r\n  }, [isActive, seconds]);\r\n\r\n  function toggle() {\r\n    setIsActive((prev) => !prev);\r\n  }\r\n\r\n  function reset() {\r\n    setSeconds(1500);\r\n    setIsActive(false);\r\n  }\r\n\r\n  // this seems to work for which one to display, I also tried checking for isActive but it didn't work as intended\r\n  function startOrResume() {\r\n    if (seconds === 1500) {\r\n      return \"Start\";\r\n    } else {\r\n      return \"Resume\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"white-text\">Pomodoro</h1>\r\n      <hr className=\"app-line\"></hr>\r\n      <div>\r\n        <h1 className=\"white-text\">\r\n          {\" \"}\r\n          {`${timeDisplay.minutes}:${timeDisplay.seconds}`}\r\n        </h1>\r\n        <button\r\n          className={`timer-button-status-${isActive ? \"active\" : \"inactive\"}`}\r\n          onClick={toggle}\r\n        >\r\n          {isActive ? \"Pause\" : startOrResume()}\r\n        </button>\r\n        <button className=\"timer-button\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}