{"ast":null,"code":"var _jsxFileName = \"/home/lawrence/Projects/habit-tracker/frontend/src/pages/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Pomodoro from \"./Pomodoro.js\";\nimport \"./timer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Timer() {\n  _s();\n\n  const [secondsPomodoro, setSecondsPomodoro] = useState(2);\n  const [secondsBreak, setSecondsBreak] = useState(5);\n  const [isActive, setIsActive] = useState(false);\n  const pomodoroTimeDisplay = timeConversion(secondsPomodoro);\n  const breakTimeDisplay = timeConversion(secondsBreak);\n  let isPomodoro = false; // not sure if this is the proper way to do this but I leave seconds as the state variable and use a normal variable that uses seconds with derived state\n\n  function timeConversion(seconds) {\n    let time = {};\n\n    if (seconds > 0) {\n      time = {\n        minutes: Math.floor(seconds / 60) > 10 ? Math.floor(seconds / 60) : `0${Math.floor(seconds / 60)}`,\n        seconds: seconds % 60 > 10 ? seconds % 60 : `0${seconds % 60}`\n      };\n    } else if (seconds === 0) {\n      time = {\n        minutes: \"00\",\n        seconds: \"00\"\n      };\n    }\n\n    return time;\n  }\n\n  useEffect(() => {\n    let interval = null;\n\n    function timerFinished() {\n      console.log(\"it's over\");\n      notificationPermission();\n      isPomodoro = true;\n    }\n\n    if (isActive && secondsPomodoro !== 0) {\n      interval = setInterval(() => {\n        setSecondsPomodoro(seconds => seconds - 1);\n      }, 1000);\n    } else if (!isActive && secondsPomodoro !== 0) {\n      clearInterval(interval);\n    } else if (secondsPomodoro === 0) {\n      timerFinished();\n    }\n\n    return () => clearInterval(interval); // return clearInterval for clean up\n  }, [isActive, secondsPomodoro]); // local notifications\n\n  function notificationPermission() {\n    Notification.requestPermission().then(perm => {\n      if (perm === \"granted\") {\n        const notification = new Notification(\"Pomodoro Finished\", {\n          body: \"Start Break?\",\n          data: {\n            test: \"Data\"\n          },\n          icon: \"mango.png\"\n        }); // click the notification to immediately start break\n\n        notification.addEventListener(\"click\", e => {\n          // console.log(e);\n          startBreak();\n        });\n      }\n    });\n  }\n\n  function toggle() {\n    setIsActive(prev => !prev);\n  }\n\n  function reset() {\n    setSecondsPomodoro(1500);\n    setIsActive(false);\n    isPomodoro = false;\n  } // this seems to work for which one to display, I also tried checking for isActive but it didn't work as intended\n\n\n  function startOrResume() {\n    if (secondsPomodoro === 1500) {\n      return \"Start\";\n    } else {\n      return \"Resume\";\n    }\n  }\n\n  function startBreak() {\n    setSecondsPomodoro(300);\n    setIsActive(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"white-text\",\n      children: \"Pomodoro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"app-line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pomodoro-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"white-text\",\n        children: [`${pomodoroTimeDisplay.minutes}:${pomodoroTimeDisplay.seconds}`, `${breakTimeDisplay.minutes}:${breakTimeDisplay.seconds}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `timer-button-status-${isActive ? \"active\" : \"inactive\"}`,\n        onClick: toggle,\n        children: isActive ? \"Pause\" : startOrResume()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"timer-button\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pomodoro, {\n      minutes: pomodoroTimeDisplay.minutes,\n      seconds: pomodoroTimeDisplay.seconds,\n      active: isActive,\n      toggle: toggle,\n      reset: reset,\n      startOrResume: startOrResume\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pomodoro, {\n      minutes: breakTimeDisplay.minutes,\n      seconds: breakTimeDisplay.seconds,\n      active: isActive,\n      toggle: toggle,\n      reset: reset,\n      startOrResume: startOrResume\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"+qilUIZpvDMPuWPtJNURaEUQhzA=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useEffect","useState","Pomodoro","Timer","secondsPomodoro","setSecondsPomodoro","secondsBreak","setSecondsBreak","isActive","setIsActive","pomodoroTimeDisplay","timeConversion","breakTimeDisplay","isPomodoro","seconds","time","minutes","Math","floor","interval","timerFinished","console","log","notificationPermission","setInterval","clearInterval","Notification","requestPermission","then","perm","notification","body","data","test","icon","addEventListener","e","startBreak","toggle","prev","reset","startOrResume"],"sources":["/home/lawrence/Projects/habit-tracker/frontend/src/pages/Timer.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Pomodoro from \"./Pomodoro.js\";\r\nimport \"./timer.css\";\r\n\r\nfunction Timer() {\r\n  const [secondsPomodoro, setSecondsPomodoro] = useState(2);\r\n  const [secondsBreak, setSecondsBreak] = useState(5);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const pomodoroTimeDisplay = timeConversion(secondsPomodoro);\r\n  const breakTimeDisplay = timeConversion(secondsBreak);\r\n\r\n  let isPomodoro = false;\r\n\r\n  // not sure if this is the proper way to do this but I leave seconds as the state variable and use a normal variable that uses seconds with derived state\r\n  function timeConversion(seconds) {\r\n    let time = {};\r\n    if (seconds > 0) {\r\n      time = {\r\n        minutes:\r\n          Math.floor(seconds / 60) > 10\r\n            ? Math.floor(seconds / 60)\r\n            : `0${Math.floor(seconds / 60)}`,\r\n        seconds: seconds % 60 > 10 ? seconds % 60 : `0${seconds % 60}`,\r\n      };\r\n    } else if (seconds === 0) {\r\n      time = {\r\n        minutes: \"00\",\r\n        seconds: \"00\",\r\n      };\r\n    }\r\n    return time;\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    function timerFinished() {\r\n      console.log(\"it's over\");\r\n      notificationPermission();\r\n      isPomodoro = true;\r\n    }\r\n\r\n    if (isActive && secondsPomodoro !== 0) {\r\n      interval = setInterval(() => {\r\n        setSecondsPomodoro((seconds) => seconds - 1);\r\n      }, 1000);\r\n    } else if (!isActive && secondsPomodoro !== 0) {\r\n      clearInterval(interval);\r\n    } else if (secondsPomodoro === 0) {\r\n      timerFinished();\r\n    }\r\n    return () => clearInterval(interval); // return clearInterval for clean up\r\n  }, [isActive, secondsPomodoro]);\r\n\r\n  // local notifications\r\n\r\n  function notificationPermission() {\r\n    Notification.requestPermission().then((perm) => {\r\n      if (perm === \"granted\") {\r\n        const notification = new Notification(\"Pomodoro Finished\", {\r\n          body: \"Start Break?\",\r\n          data: { test: \"Data\" },\r\n          icon: \"mango.png\",\r\n        });\r\n        // click the notification to immediately start break\r\n        notification.addEventListener(\"click\", (e) => {\r\n          // console.log(e);\r\n          startBreak();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  function toggle() {\r\n    setIsActive((prev) => !prev);\r\n  }\r\n\r\n  function reset() {\r\n    setSecondsPomodoro(1500);\r\n    setIsActive(false);\r\n    isPomodoro = false;\r\n  }\r\n\r\n  // this seems to work for which one to display, I also tried checking for isActive but it didn't work as intended\r\n  function startOrResume() {\r\n    if (secondsPomodoro === 1500) {\r\n      return \"Start\";\r\n    } else {\r\n      return \"Resume\";\r\n    }\r\n  }\r\n\r\n  function startBreak() {\r\n    setSecondsPomodoro(300);\r\n    setIsActive(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"white-text\">Pomodoro</h1>\r\n      <hr className=\"app-line\"></hr>\r\n      <div className=\"pomodoro-box\">\r\n        <h1 className=\"white-text\">\r\n          {`${pomodoroTimeDisplay.minutes}:${pomodoroTimeDisplay.seconds}`}\r\n          {`${breakTimeDisplay.minutes}:${breakTimeDisplay.seconds}`}\r\n        </h1>\r\n        <button\r\n          className={`timer-button-status-${isActive ? \"active\" : \"inactive\"}`}\r\n          onClick={toggle}\r\n        >\r\n          {isActive ? \"Pause\" : startOrResume()}\r\n        </button>\r\n        <button className=\"timer-button\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n\r\n      <Pomodoro\r\n        minutes={pomodoroTimeDisplay.minutes}\r\n        seconds={pomodoroTimeDisplay.seconds}\r\n        active={isActive}\r\n        toggle={toggle}\r\n        reset={reset}\r\n        startOrResume={startOrResume}\r\n      />\r\n      <Pomodoro\r\n        minutes={breakTimeDisplay.minutes}\r\n        seconds={breakTimeDisplay.seconds}\r\n        active={isActive}\r\n        toggle={toggle}\r\n        reset={reset}\r\n        startOrResume={startOrResume}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAO,aAAP;;;AAEA,SAASC,KAAT,GAAiB;EAAA;;EACf,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCJ,QAAQ,CAAC,CAAD,CAAtD;EACA,MAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,CAAD,CAAhD;EACA,MAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAMS,mBAAmB,GAAGC,cAAc,CAACP,eAAD,CAA1C;EACA,MAAMQ,gBAAgB,GAAGD,cAAc,CAACL,YAAD,CAAvC;EAEA,IAAIO,UAAU,GAAG,KAAjB,CAPe,CASf;;EACA,SAASF,cAAT,CAAwBG,OAAxB,EAAiC;IAC/B,IAAIC,IAAI,GAAG,EAAX;;IACA,IAAID,OAAO,GAAG,CAAd,EAAiB;MACfC,IAAI,GAAG;QACLC,OAAO,EACLC,IAAI,CAACC,KAAL,CAAWJ,OAAO,GAAG,EAArB,IAA2B,EAA3B,GACIG,IAAI,CAACC,KAAL,CAAWJ,OAAO,GAAG,EAArB,CADJ,GAEK,IAAGG,IAAI,CAACC,KAAL,CAAWJ,OAAO,GAAG,EAArB,CAAyB,EAJ9B;QAKLA,OAAO,EAAEA,OAAO,GAAG,EAAV,GAAe,EAAf,GAAoBA,OAAO,GAAG,EAA9B,GAAoC,IAAGA,OAAO,GAAG,EAAG;MALxD,CAAP;IAOD,CARD,MAQO,IAAIA,OAAO,KAAK,CAAhB,EAAmB;MACxBC,IAAI,GAAG;QACLC,OAAO,EAAE,IADJ;QAELF,OAAO,EAAE;MAFJ,CAAP;IAID;;IACD,OAAOC,IAAP;EACD;;EAEDf,SAAS,CAAC,MAAM;IACd,IAAImB,QAAQ,GAAG,IAAf;;IAEA,SAASC,aAAT,GAAyB;MACvBC,OAAO,CAACC,GAAR,CAAY,WAAZ;MACAC,sBAAsB;MACtBV,UAAU,GAAG,IAAb;IACD;;IAED,IAAIL,QAAQ,IAAIJ,eAAe,KAAK,CAApC,EAAuC;MACrCe,QAAQ,GAAGK,WAAW,CAAC,MAAM;QAC3BnB,kBAAkB,CAAES,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAlB;MACD,CAFqB,EAEnB,IAFmB,CAAtB;IAGD,CAJD,MAIO,IAAI,CAACN,QAAD,IAAaJ,eAAe,KAAK,CAArC,EAAwC;MAC7CqB,aAAa,CAACN,QAAD,CAAb;IACD,CAFM,MAEA,IAAIf,eAAe,KAAK,CAAxB,EAA2B;MAChCgB,aAAa;IACd;;IACD,OAAO,MAAMK,aAAa,CAACN,QAAD,CAA1B,CAlBc,CAkBwB;EACvC,CAnBQ,EAmBN,CAACX,QAAD,EAAWJ,eAAX,CAnBM,CAAT,CA7Be,CAkDf;;EAEA,SAASmB,sBAAT,GAAkC;IAChCG,YAAY,CAACC,iBAAb,GAAiCC,IAAjC,CAAuCC,IAAD,IAAU;MAC9C,IAAIA,IAAI,KAAK,SAAb,EAAwB;QACtB,MAAMC,YAAY,GAAG,IAAIJ,YAAJ,CAAiB,mBAAjB,EAAsC;UACzDK,IAAI,EAAE,cADmD;UAEzDC,IAAI,EAAE;YAAEC,IAAI,EAAE;UAAR,CAFmD;UAGzDC,IAAI,EAAE;QAHmD,CAAtC,CAArB,CADsB,CAMtB;;QACAJ,YAAY,CAACK,gBAAb,CAA8B,OAA9B,EAAwCC,CAAD,IAAO;UAC5C;UACAC,UAAU;QACX,CAHD;MAID;IACF,CAbD;EAcD;;EAED,SAASC,MAAT,GAAkB;IAChB7B,WAAW,CAAE8B,IAAD,IAAU,CAACA,IAAZ,CAAX;EACD;;EAED,SAASC,KAAT,GAAiB;IACfnC,kBAAkB,CAAC,IAAD,CAAlB;IACAI,WAAW,CAAC,KAAD,CAAX;IACAI,UAAU,GAAG,KAAb;EACD,CA7Ec,CA+Ef;;;EACA,SAAS4B,aAAT,GAAyB;IACvB,IAAIrC,eAAe,KAAK,IAAxB,EAA8B;MAC5B,OAAO,OAAP;IACD,CAFD,MAEO;MACL,OAAO,QAAP;IACD;EACF;;EAED,SAASiC,UAAT,GAAsB;IACpBhC,kBAAkB,CAAC,GAAD,CAAlB;IACAI,WAAW,CAAC,IAAD,CAAX;EACD;;EAED,oBACE;IAAA,wBACE;MAAI,SAAS,EAAC,YAAd;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAI,SAAS,EAAC;IAAd;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAK,SAAS,EAAC,cAAf;MAAA,wBACE;QAAI,SAAS,EAAC,YAAd;QAAA,WACI,GAAEC,mBAAmB,CAACM,OAAQ,IAAGN,mBAAmB,CAACI,OAAQ,EADjE,EAEI,GAAEF,gBAAgB,CAACI,OAAQ,IAAGJ,gBAAgB,CAACE,OAAQ,EAF3D;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAKE;QACE,SAAS,EAAG,uBAAsBN,QAAQ,GAAG,QAAH,GAAc,UAAW,EADrE;QAEE,OAAO,EAAE8B,MAFX;QAAA,UAIG9B,QAAQ,GAAG,OAAH,GAAaiC,aAAa;MAJrC;QAAA;QAAA;QAAA;MAAA,QALF,eAWE;QAAQ,SAAS,EAAC,cAAlB;QAAiC,OAAO,EAAED,KAA1C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAXF;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,eAmBE,QAAC,QAAD;MACE,OAAO,EAAE9B,mBAAmB,CAACM,OAD/B;MAEE,OAAO,EAAEN,mBAAmB,CAACI,OAF/B;MAGE,MAAM,EAAEN,QAHV;MAIE,MAAM,EAAE8B,MAJV;MAKE,KAAK,EAAEE,KALT;MAME,aAAa,EAAEC;IANjB;MAAA;MAAA;MAAA;IAAA,QAnBF,eA2BE,QAAC,QAAD;MACE,OAAO,EAAE7B,gBAAgB,CAACI,OAD5B;MAEE,OAAO,EAAEJ,gBAAgB,CAACE,OAF5B;MAGE,MAAM,EAAEN,QAHV;MAIE,MAAM,EAAE8B,MAJV;MAKE,KAAK,EAAEE,KALT;MAME,aAAa,EAAEC;IANjB;MAAA;MAAA;MAAA;IAAA,QA3BF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAsCD;;GAnIQtC,K;;KAAAA,K;AAqIT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}